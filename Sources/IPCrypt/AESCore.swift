import Foundation

enum AESCore {
    static let sBox: [UInt8] = [
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]

    static let invSBox: [UInt8] = [
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    ]

    static let rcon: [UInt8] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

    // GF(2^8) multiplication functions using pure computation
    static func gfMul2(_ x: UInt8) -> UInt8 {
        let high = (x & 0x80) != 0
        var result = x << 1
        if high {
            result ^= 0x1B
        }
        return result
    }

    static func gfMul3(_ x: UInt8) -> UInt8 {
        gfMul2(x) ^ x
    }

    static func gfMul9(_ x: UInt8) -> UInt8 {
        // 9 = 8 + 1 = 2^3 + 1
        gfMul2(gfMul2(gfMul2(x))) ^ x
    }

    static func gfMul11(_ x: UInt8) -> UInt8 {
        // 11 = 8 + 2 + 1 = 2^3 + 2 + 1
        gfMul2(gfMul2(gfMul2(x))) ^ gfMul2(x) ^ x
    }

    static func gfMul13(_ x: UInt8) -> UInt8 {
        // 13 = 8 + 4 + 1 = 2^3 + 2^2 + 1
        let x2 = gfMul2(x)
        let x4 = gfMul2(x2)
        let x8 = gfMul2(x4)
        return x8 ^ x4 ^ x
    }

    static func gfMul14(_ x: UInt8) -> UInt8 {
        // 14 = 8 + 4 + 2 = 2^3 + 2^2 + 2
        let x2 = gfMul2(x)
        let x4 = gfMul2(x2)
        let x8 = gfMul2(x4)
        return x8 ^ x4 ^ x2
    }

    static func subBytes(_ state: inout Data) {
        for i in 0..<state.count {
            state[i] = sBox[Int(state[i])]
        }
    }

    static func invSubBytes(_ state: inout Data) {
        for i in 0..<state.count {
            state[i] = invSBox[Int(state[i])]
        }
    }

    static func shiftRows(_ state: inout Data) {
        let temp = Data(state)
        state[0] = temp[0]; state[1] = temp[5]; state[2] = temp[10]; state[3] = temp[15]
        state[4] = temp[4]; state[5] = temp[9]; state[6] = temp[14]; state[7] = temp[3]
        state[8] = temp[8]; state[9] = temp[13]; state[10] = temp[2]; state[11] = temp[7]
        state[12] = temp[12]; state[13] = temp[1]; state[14] = temp[6]; state[15] = temp[11]
    }

    static func invShiftRows(_ state: inout Data) {
        let temp = Data(state)
        state[0] = temp[0]; state[1] = temp[13]; state[2] = temp[10]; state[3] = temp[7]
        state[4] = temp[4]; state[5] = temp[1]; state[6] = temp[14]; state[7] = temp[11]
        state[8] = temp[8]; state[9] = temp[5]; state[10] = temp[2]; state[11] = temp[15]
        state[12] = temp[12]; state[13] = temp[9]; state[14] = temp[6]; state[15] = temp[3]
    }

    static func mixColumns(_ state: inout Data) {
        for i in stride(from: 0, to: 16, by: 4) {
            let s0 = state[i]
            let s1 = state[i + 1]
            let s2 = state[i + 2]
            let s3 = state[i + 3]

            state[i] = gfMul2(s0) ^ gfMul3(s1) ^ s2 ^ s3
            state[i + 1] = s0 ^ gfMul2(s1) ^ gfMul3(s2) ^ s3
            state[i + 2] = s0 ^ s1 ^ gfMul2(s2) ^ gfMul3(s3)
            state[i + 3] = gfMul3(s0) ^ s1 ^ s2 ^ gfMul2(s3)
        }
    }

    static func invMixColumns(_ state: inout Data) {
        for i in stride(from: 0, to: 16, by: 4) {
            let s0 = state[i]
            let s1 = state[i + 1]
            let s2 = state[i + 2]
            let s3 = state[i + 3]

            state[i] = gfMul14(s0) ^ gfMul11(s1) ^ gfMul13(s2) ^ gfMul9(s3)
            state[i + 1] = gfMul9(s0) ^ gfMul14(s1) ^ gfMul11(s2) ^ gfMul13(s3)
            state[i + 2] = gfMul13(s0) ^ gfMul9(s1) ^ gfMul14(s2) ^ gfMul11(s3)
            state[i + 3] = gfMul11(s0) ^ gfMul13(s1) ^ gfMul9(s2) ^ gfMul14(s3)
        }
    }

    static func addRoundKey(_ state: inout Data, _ roundKey: Data) {
        for i in 0..<16 {
            state[i] ^= roundKey[i]
        }
    }

    static func expandKey(_ key: Data) -> [Data] {
        guard key.count == 16 else { return [] }

        var roundKeys = [key]

        for i in 0..<10 {
            let prevKey = roundKeys[i]
            var newKey = Data(count: 16)

            let temp = Data(prevKey[12..<16])

            let rotated = Data([temp[1], temp[2], temp[3], temp[0]])
            var subbed = Data(rotated.map { sBox[Int($0)] })
            subbed[0] ^= rcon[i]

            for j in 0..<4 {
                let prevWord = prevKey[(j * 4)..<((j + 1) * 4)]
                var word: Data

                if j == 0 {
                    word = Data(zip(prevWord, subbed).map { $0 ^ $1 })
                } else {
                    let prevNewWord = newKey[((j - 1) * 4)..<(j * 4)]
                    word = Data(zip(prevWord, prevNewWord).map { $0 ^ $1 })
                }

                newKey[(j * 4)..<((j + 1) * 4)] = word
            }

            roundKeys.append(newKey)
        }

        return roundKeys
    }

    static func encryptBlock(_ plaintext: Data, key: Data) -> Data {
        guard plaintext.count == 16, key.count == 16 else { return Data() }

        let roundKeys = expandKey(key)
        var state = Data(plaintext)

        addRoundKey(&state, roundKeys[0])

        for i in 1..<10 {
            subBytes(&state)
            shiftRows(&state)
            mixColumns(&state)
            addRoundKey(&state, roundKeys[i])
        }

        subBytes(&state)
        shiftRows(&state)
        addRoundKey(&state, roundKeys[10])

        return state
    }

    static func decryptBlock(_ ciphertext: Data, key: Data) -> Data {
        guard ciphertext.count == 16, key.count == 16 else { return Data() }

        let roundKeys = expandKey(key)
        var state = Data(ciphertext)

        addRoundKey(&state, roundKeys[10])
        invShiftRows(&state)
        invSubBytes(&state)

        for i in (1..<10).reversed() {
            addRoundKey(&state, roundKeys[i])
            invMixColumns(&state)
            invShiftRows(&state)
            invSubBytes(&state)
        }

        addRoundKey(&state, roundKeys[0])

        return state
    }
}
